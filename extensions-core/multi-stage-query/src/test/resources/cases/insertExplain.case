Copyright (c) Imply Data, Inc. All rights reserved.

This software is the confidential and proprietary information
of Imply Data, Inc. You shall not disclose such Confidential
Information and shall use it only in accordance with the terms
of the license agreement you entered into with Imply.
==============================================================
Test cases from the CalciteInsertDmlTest file

Holds the EXPLAIN test which cannot be run with the talaria
flag set: it must be run as a normal Druid query. (The other
INSERT tests have the "talaria" flag "hard coded" in the
test setup.
==============================================================
Converted from testExplainInsertFromExternal()
=== case
EXPLAIN INSERT from external
=== SQL
EXPLAIN PLAN FOR
INSERT INTO dst
SELECT *
FROM TABLE(extern(
   '{
     "type": "inline",
     "data": "a,b,1\nc,d,2\n"
    }',
	'{
	  "type": "csv",
	  "columns": ["x","y","z"],
	  "listDelimiter": null,
	  "findColumnsFromHeader": false,
	  "skipHeaderRows": 0
	 }',
	 '[
	   {"name": "x", "type": "STRING"},
	   {"name": "y", "type": "STRING"},
	   {"name": "z", "type": "LONG"}
	 ]'
))
PARTITIONED BY ALL TIME
=== options
user=testSuperuser
=== explain
DruidQueryRel(query=[(
{
  "queryType" : "scan",
  "dataSource" : {
    "type" : "external",
    "inputSource" : {
      "type" : "inline",
      "data" : "a,b,1\nc,d,2\n"
    },
    "inputFormat" : {
      "type" : "csv",
      "columns" : [ "x", "y", "z" ],
      "listDelimiter" : null,
      "findColumnsFromHeader" : false,
      "skipHeaderRows" : 0
    },
    "signature" : [ {
      "name" : "x",
      "type" : "STRING"
    }, {
      "name" : "y",
      "type" : "STRING"
    }, {
      "name" : "z",
      "type" : "LONG"
    } ]
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "resultFormat" : "compactedList",
  "columns" : [ "x", "y", "z" ],
  "context" : {
    "sqlInsertSegmentGranularity" : "{\"type\":\"all\"}",
!    "sqlQueryId" : ".*"
  },
  "granularity" : {
    "type" : "all"
  }
},
signature=[(
  {x:STRING, y:STRING, z:LONG}
])
---
[ {
  "name" : "EXTERNAL",
  "type" : "EXTERNAL"
}, {
  "name" : "dst",
  "type" : "DATASOURCE"
} ]
