Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
==============================================================
Test cases related to Druid catalog input tables.

==============================================================
Check that the catalog modifies the physical "foo" schema

=== case
INSERT from external
=== SQL
SELECT *
FROM foo
ORDER BY __time
LIMIT 1
=== unparsed
SELECT `foo`.`__time`, `foo`.`extra1`, `foo`.`dim2`, `foo`.`dim1`, `foo`.`cnt`, `foo`.`m1`, `foo`.`extra2`, `foo`.`extra3`, `foo`.`m2`
FROM `druid`.`foo` AS `foo`
ORDER BY `__time`
FETCH NEXT 1 ROWS ONLY
ORDER BY `__time`
FETCH NEXT 1 ROWS ONLY
=== schema
__time TIMESTAMP(3)
extra1 VARCHAR
dim2 VARCHAR
dim1 VARCHAR
cnt BIGINT
m1 DOUBLE
extra2 BIGINT
extra3 VARCHAR
m2 DOUBLE
=== resources
DATASOURCE/foo/READ
=== plan
LogicalSort(sort0=[$0], dir0=[ASC], fetch=[1])
  LogicalProject(__time=[$0], extra1=[$1], dim2=[$2], dim1=[$3], cnt=[$4], m1=[$5], extra2=[$6], extra3=[$7], m2=[$8])
    LogicalTableScan(table=[[druid, foo]])
=== native
{
  "queryType" : "scan",
  "dataSource" : {
    "type" : "table",
    "name" : "foo"
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "resultFormat" : "compactedList",
  "limit" : 1,
  "order" : "ascending",
  "columns" : [ "__time", "cnt", "dim1", "dim2", "extra1", "extra2", "extra3", "m1", "m2" ],
  "legacy" : false,
  "context" : {
    "multiStageQuery" : false,
    "sqlQueryId" : "dummyId"
  },
  "granularity" : {
    "type" : "all"
  }
}
=== results
